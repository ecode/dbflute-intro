apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'project-report'

group = 'org.dbflute'
version = '0.0.3-SNAPSHOT'

ext {
    encoding = 'UTF-8'

    versions =
        [
            jdk : '1.8',
            gradle : '2.3',

            junit : '4.11',
            utflute : '0.6.0-SNAPSHOT',

            lastaflute : '0.6.0-SNAPSHOT',
            dbflute : '1.1.0-sp2'
        ]
}

def classesDir = 'src/main/webapp/WEB-INF/classes'
sourceSets.main.output.classesDir = classesDir
sourceSets.main.output.resourcesDir = classesDir

fileTree(dir: 'gradle/gradlePlugin', includes: ['*.gradle']).each { apply from: it }

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile 'commons-io:commons-io:2.4'

    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
    compile 'javax.transaction:javax.transaction-api:1.2'

    compile "org.dbflute:dbflute-runtime:${versions.dbflute}"
    compile "org.dbflute.lasta:lastaflute:${versions.lastaflute}"

    providedCompile 'org.eclipse.jetty:jetty-webapp:9.2.10.v20150310'
    providedCompile 'org.eclipse.jetty:jetty-annotations:9.2.10.v20150310'
}

eclipse {
    classpath {
        defaultOutputDir = file(classesDir)
        downloadSources = true
        downloadJavadoc = false

        file.whenMerged { cp ->
            cp.entries.findAll {
                it.path.contains('JRE_CONTAINER')
            }*.path = "org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-${versions.jdk}"
        }
    }
}

javadoc {
    failOnError = false
}

tasks['classes'].dependsOn(['gulpBuild'])
task gulpBuild (type: Exec) {
    workingDir file('static')
    commandLine 'gulp', 'build'
}

tasks['clean'].dependsOn(['gulpClean'])
task gulpClean (type: Exec) {
    workingDir file('static')
    commandLine 'gulp', 'clean'
}

war {
    from {
        configurations.providedCompile.collect {
            it.isDirectory() ? it : project.zipTree(it)
        }
    }

    from fileTree(dir: file(classesDir), include: '**/org/dbflute/boot/*Boot.class')
    from fileTree(dir: file('static/dist'), include: '**/**')

    includeEmptyDirs = false

    version = ''

    manifest {
        attributes 'Implementation-Title': project.name
        attributes 'Implementation-Version': project.version
        attributes 'SCM-Branch': 'TODO'
        attributes 'SCM-Revision': 'TODO'
        attributes 'Build-Timestamp': 'TODO'
        attributes 'Jenkins-Build-Number': 'TODO'
        attributes 'Main-Class' : 'org.dbflute.boot.DbfluteIntroBoot'
    }
}

build {
    doLast {
        tasks.runLaunch4j.execute()
    }
}
