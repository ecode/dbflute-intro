buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id "com.moowork.gulp" version "0.11"
    id "com.github.hierynomus.license" version "0.12.1"
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'war'
apply plugin: 'project-report'

group = 'org.dbflute'
version = '0.0.3-SNAPSHOT'

ext {
    encoding = 'UTF-8'

    versions =
        [
            jdk : '1.8',
            gradle : '2.12',
            node : '5.9.1',

            slf4j : '1.7.18',
            logback : '1.1.6',

            lastaflute : '0.8.2',
            dbflute : '1.1.1',

            junit : '4.12',
            utflute : '0.6.0E',
            jettyboot : '0.4.2'
        ]
}

task refreshResource {

}

task refreshResourceAfter {

}

fileTree(dir: 'gradle/gradlePlugin', includes: ['*.gradle']).each { apply from: it }

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/groups/public'
    }
}

dependencies {
    compile 'commons-io:commons-io:2.4'

    compile "org.slf4j:slf4j-api:${versions.slf4j}"
    runtime "ch.qos.logback:logback-classic:${versions.logback}"

    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
    compile 'javax.transaction:javax.transaction-api:1.2'

    compile "org.dbflute:dbflute-runtime:${versions.dbflute}"
    compile "org.lastaflute:lastaflute:${versions.lastaflute}"

    providedCompile "org.dbflute.jetty:jetty-boot:${versions.jettyboot}"

    testCompile "junit:junit:${versions.junit}"
    testCompile "org.dbflute.utflute:utflute-lastaflute:${versions.utflute}"
}

mainClassName = 'org.dbflute.intro.DbfluteIntroBoot'

war {
    from {
        configurations.providedCompile.collect {
            it.isDirectory() ? it : project.zipTree(it)
        }
        configurations.providedRuntime.collect {
            it.isDirectory() ? it : project.zipTree(it)
        }
    }

    from fileTree(dir: sourceSets.main.output.classesDir, includes: ["${mainClassName.replace('.', '/')}.class"])
    from fileTree(dir: file('dist'), include: '**/**')

    includeEmptyDirs = false

    version = ''

    def scmBranch = 'unknown'
    def scmRevision = 'unknown'

    try {
        scmBranch = 'git branch --contains'.execute().text.trim() - '* '
        scmRevision = 'git rev-parse HEAD'.execute().text.trim()
    } catch (Exception e) {
    }

    manifest {
        attributes 'Implementation-Title': project.name
        attributes 'Implementation-Version': project.version
        attributes 'SCM-Branch': scmBranch
        attributes 'SCM-Revision': scmRevision
        attributes 'Build-Timestamp': new java.text.SimpleDateFormat('yyyy/MM/dd HH:mm:ss.SSS').format(new Date())
        attributes 'Jenkins-Build-Number': System.getenv()['BUILD_NUMBER'] ?: ''
        attributes 'Main-Class' : mainClassName
    }
}

license {
    strictCheck true
    include "**/*.java"
    mapping {
        java='SLASHSTAR_STYLE'
    }
}

task refresh(dependsOn: ['refreshResource', 'refreshResourceAfter', 'eclipse'])
tasks['refreshResourceAfter'].dependsOn(['refreshResource'])
if (tasks.findByName('eclipseClasspath')) {
    tasks['eclipseClasspath'].dependsOn(['refreshResource'])
}
